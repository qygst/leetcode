### 解题思路

存储父节点和访问过的节点,依次向上遍历父节点
使用WeakSet和WeakMap

### 代码

* []

```typescript

function lowestCommonAncestor(
    root?: TreeNode | null,
    p?: TreeNode | null,
    q?: TreeNode | null,
): TreeNode | null {
    if (!root) return null;
    const visited = new WeakSet<TreeNode>();

    const parent = new WeakMap<TreeNode, TreeNode | null>();
    dfs(root, parent);

    while (p) {
        visited.add(p);
        p = parent.get(p);
    }
    while (q) {
        if (visited.has(q)) return q;
        q = parent.get(q);
    }
    return null;
}
function dfs(root: TreeNode, parent: WeakMap<TreeNode, TreeNode | null>) {
    if (root.left) {
        parent.set(root.left, root);
        dfs(root.left, parent);
    }
    if (root.right) {
        parent.set(root.right, root);
        dfs(root.right, parent);
    }
}
```

* []

```javascript

function lowestCommonAncestor(root, p, q) {
    if (!root) return null;
    const visited = new WeakSet();
    const parent = new WeakMap();
    dfs(root, parent);
    while(p){
        visited.add(p);
        p = parent.get(p);
    }
    while(q){
        if (visited.has(q)) return q;
        q = parent.get(q);
    }
    return null;
}
function dfs(root, parent) {
    if (root.left) {
        parent.set(root.left, root);
        dfs(root.left, parent);
    }
    if (root.right) {
        parent.set(root.right, root);
        dfs(root.right, parent);
    }
}
```

